


//Problem #5 -- Smallest Multiple https://projecteuler.net/problem=5
//2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Project_Euler
{
    class Program
    {
        static void Main(string[] args)
        {
            List<int> nums = new List<int>() { 20 };
            int product = 1;

            Populate(nums);

            foreach (int i in nums)
            {
                Console.WriteLine(i);
            }

            for (var i = 0; i < nums.Count; i++)
            {

            }

            Console.WriteLine(product);
            Console.ReadKey();
        }

        static void Populate(List<int> numlist)
        {
            for (var i = 20; i > 0; i--)
            {
                for (var j = 0; j < numlist.Count; j++)
                {
                    if (numlist[j] % i == 0)
                        break;
                    if (numlist[j] % i != 0 && j == numlist.Count - 1)
                        numlist.Add(i);
                }
            }
        }
    }
}


/*
//Problem #4 -- Largest Palindrom Product https://projecteuler.net/problem=4
//A palindromic number reads the same both ways. 
//The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//Find the largest palindrome made from the product of two 3-digit numbers.


using System;
using System.Collections;
using System.Linq;

namespace Project_Euler
{
    class Program
    {
        static void Main(string[] args)
        {
            ArrayList pOf3Di = new ArrayList();

            for(var i = 100; i < 1000; i++)
            {
                for (var j = 100; j < 1000; j++)
                {
                    pOf3Di.Add(i * j);
                }
            }

            Console.WriteLine(pOf3Di.Count);
            pOf3Di.Sort();
            
            for (var i = pOf3Di.Count - 1; i >=0; i--)
            {                
                if (IsPalindrome((int)pOf3Di[i]))
                {
                    Console.WriteLine(pOf3Di[i]);
                    break;
                }
            }

            Console.ReadKey();
        }

        static bool IsPalindrome(int num)
        {
            string sNum = Convert.ToString(num);

            while(true)
            {
                if (sNum[0] != sNum[sNum.Length-1])
                    return false;
                if (sNum.Length < 4)
                    return true;
                sNum = sNum.Substring(1, sNum.Length - 2);
            }
        }

    }
}


/*
//Problem #3 -- Largest Prime Factor https://projecteuler.net/problem=3
//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices.ComTypes;

namespace Project_Euler
{
    class Program
    {
        static void Main(string[] args)
        {
            long num = 600851475143;
            Console.WriteLine(LargestPrime(Factor(num)));

            Console.ReadKey();
        }
        static Stack<long> Factor(long num)
        {
            Stack<long> Factors = new Stack<long>();
            for(int i = 1; i < Math.Sqrt(num); i++)
            {
                if(num % i == 0)
                {
                    Console.WriteLine($"{i} x {num / i}");
                    Factors.Push(i);
                    Factors.Push(num / i);
                }
            }
            return Factors;
        }

        static long LargestPrime(Stack<long> num)
        {
            long LPF = 1;
            for(int i = 0; i < num.Count; i++)
            {
                if (Factor(num.Peek()).Count ==2)
                    LPF = num.Pop();
                else num.Pop();
            }
            return LPF;
        }
    }
}


/*
//Problem #2 -- Even Fibonacci numbers https://projecteuler.net/problem=2

//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
//find the sum of the even-valued terms.

using System;

namespace Project_Euler
{
    class Program
    {
        static void Main(string[] args)
        {
            int num = 4000000;
            Console.WriteLine(fibSum(num));

            Console.ReadKey();
        }

        static int fibSum(int num)
        {
            int sum = 0;
            for (int i = 0, j = 1; i < num; i += j)
            {
                if (i % 2 == 0)
                    sum += i;
                j += i;
                if (j % 2 == 0)
                    sum += j;
            }
            return sum;
        }
    }
}




/*
//Problem #1 -- Multiples of 3 and 5 https://projecteuler.net/problem=1

//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
//The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000. 

using System;
using System.Globalization;

namespace Project_Euler
{
    class Program
    {
        static void Main(string[] args)
        {
            int num = 1000;
            int sum = 0;
            for(var i = 1; i < num; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                    sum += i;
            }

            Console.WriteLine(sum);

            Console.ReadKey();
        }
    }
}
*/
